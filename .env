const Discord = require('discord.js');
const client = new Discord.Client();
let prefix = '.env ';
let owners = ['306557645479870464', '694963006970527826', '544676649510371328'];

client.on('ready', () => console.log(`${client.user.tag} is ready!`));

client.on('message', async message => {
    if (message.author.bot || !message.content.toLowerCase().startsWith(prefix)) return;
    const user = message.mentions.users.first() || message.author;
    const args = message.content.slice(prefix.length).trim().split(/ +/g);
    const command = args.shift().toLowerCase();
    switch (command.toLowerCase()) {
    case 'help': {
        return message.channel.send('My commands:\n\`serverinfo\`\n\`userinfo\`');
    }
    break;
    case 'serverinfo': {
        return message.channel.send(`Server name: ${Discord.Util.escapeMarkdown(message.guild.name)}\nTotal members: ${message.guild.memberCount.toLocaleString()}`);
    }
    break;
    case 'userinfo': {
        return message.channel.send(`Tag: ${Discord.Util.escapeMarkdown(user.tag)}\nID: ${user.id}`);
    }
    break;
    case 'ping': {
        return message.channel.send('Pinging...').then(sent => sent.edit(`Roundtrip latency: ${sent.createdTimestamp - message.createdTimestamp}ms\nWebsocket heartbeat: ${client.ws.ping}ms.`));
    }
    break;
    case 'eval': {
        if (!owners.includes(message.author.id)) return message.channel.send('Owner only command.');
        if (!args[0]) return message.channel.send('Code required to evaluate.');
        let output;
        try {
          let evaled = eval(args.join(' '));
          if (evaled instanceof Promise) evaled = await evaled;
          function clean(text) {
            return typeof text === 'string' ? text.replace(/(`|@)/g, String.fromCharCode(8203)) : text;
          }
          if (typeof evaled !== 'string') evaled = require('util').inspect(evaled);
          output = clean(evaled);
        } catch (err) {
          output = err;
        }

        return message.channel.send([...output].slice(0, 2048).join(''), {
          code: 'js'
        });
    }
    break;
    }
});

client.login('tokenn\'t');
